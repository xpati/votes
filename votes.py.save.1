from twisted.internet.defer import inlineCallbacks

from autobahn import wamp
from autobahn.twisted.wamp import ApplicationSession

#
import RPi.GPIO as GPIO
import time
#

class VotesBackend(ApplicationSession):

    def __init__(self, config):
        ApplicationSession.__init__(self, config)
        self.init()

    def init(self):
#	led1Pin=18
#	led2Pin=23
#	led3Pin=24
	GPIO.setmode(.BCM)
	GPIO.setup(led1Pin,GPIO.OUT)
#	GPIO.output(led1Pin,GPIO.LOW)
	self._votes = {
            'Banana': 0,
            'Chocolate': 0,
            'Lemon': 0,
	    'Winner':0	
        }

    @wamp.register(u'io.crossbar.demo.vote.get')
    def getVotes(self):
	print ("received request for current vote count = refresh")
        return [{'subject': key, 'votes': value} for key, value in self._votes.items()]

    @wamp.register(u'io.crossbar.demo.vote.vote')
    def submitVote(self, subject):
       	self._votes[subject] += 1
        result = {'subject': subject, 'votes': self._votes[subject]}
        self.publish('io.crossbar.demo.vote.onvote', result)
	print ("received vote for "+subject)
	GPIO.output(led1Pin,GPIO.HIGH)
        return result

    @wamp.register(u'io.crossbar.demo.vote.reset')
    def resetVotes(self):
        self.init()
        self.publish('io.crossbar.demo.vote.onreset')
	print ("received vote reset")
	return "votes reset"

    @inlineCallbacks
    def onJoin(self, details):
        res = yield self.register(self)
        print("VotesBackend: {} procedures registered!".format(len(res)))
